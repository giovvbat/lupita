struct Data {
    value int;
    active bool;
}

struct binary_search_tree {
    tree vector<Data>;
}

function left_child(index int) int {
    return 2 * index + 1;
}

function right_child(index int) int {
    return 2 * index + 2;
}

procedure ensure_size(&bst binary_search_tree, index int) {
    while (length(bst.tree) <= index) {
        data Data;
        push(bst.tree, data);
    }
}

procedure insert_recursive(&bst binary_search_tree, index int, value int) {
    ensure_size(bst, index);

    if (index < length(bst.tree)) {
        if (!bst.tree[index].active) {
            bst.tree[index].value = value;
            bst.tree[index].active = true;
        } else {
            if (value < bst.tree[index].value) {
                insert_recursive(bst, left_child(index), value);
            } else {
                insert_recursive(bst, right_child(index), value);
            }
        }
    }
}

procedure insert(&bst binary_search_tree, value int) {
    insert_recursive(bst, 0, value);
}

procedure insert_values(&bst binary_search_tree, values vector<int>) {
    for (i int = 0; i < length(values); i += 1) {
        insert(bst, values[i]);
    }
}

function min_recursive(bst binary_search_tree, index int, &level int) Data {
    if (index < length(bst.tree)) {
        if (bst.tree[index].active) {
            left int = left_child(index);

            if (left < length(bst.tree)) {
                if (bst.tree[left].active) {
                    level += 1;
                    return min_recursive(bst, left, level);
                }
            }

            return bst.tree[index];
        }
    }

    d Data;
    return d;
}

function min(bst binary_search_tree, &level int) Data {
    level = 1;
    return min_recursive(bst, 0, level);
}

function max_recursive(bst binary_search_tree, index int, &level int) Data {
    if (index < length(bst.tree)) {
        if (bst.tree[index].active) {
            right int = right_child(index);

            if (right < length(bst.tree)) {
                if (bst.tree[right].active) {
                    level += 1;
                    return max_recursive(bst, right, level);
                }
            }

            return bst.tree[index];
        }
    }

    d Data;
    return d;
}

function max(bst binary_search_tree, &level int) Data {
    level = 1;
    return max_recursive(bst, 0, level);
}

procedure print_tree_by_level(&bst binary_search_tree) {
    level int = 0;
    start int = 0;

    len int = length(bst.tree);

    while (start < len) {
        count int = 2 ^ level;
        end int;
        if (start + count > len) {
            end = len;
        } else {
            end = start + count;
        }

        print("nodes at level " + (level + 1) + ":");

        for (i int = start; i < end; i += 1) {
            if (bst.tree[i].active) {
                print(bst.tree[i].value);
            }
        }

        print();
        start += count;
        level += 1;
    }
}

procedure main() {
    data vector<int>;
    bst binary_search_tree;

    print("enter how many nodes are to be inserted in the Binary Search Tree:");
    n int = scan();

    if (n > 0) {
        for (i int = 0; i < n; i += 1) {
            print("enter integer value for current node:");
            node_value int = scan();
            push(data, node_value);
        }

        print();
        print("inserting into Binary Search Tree: " + data);
        insert_values(bst, data);
        print();

        level int;
        min_val Data = min(bst, level);
        print("min: " + min_val.value + " at level " + level);

        max_val Data = max(bst, level);
        print("max: " + max_val.value + " at level " + level);
        print();

        print("printing tree level by level:");

        print_tree_by_level(bst);
    } else {
        print("number of nodes to be inserted in the Binary Search Tree must be positive, please try again!");
    }
}
